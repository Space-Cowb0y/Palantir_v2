// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: api/agent.proto

package agentpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Sentinel_Register_FullMethodName         = "/agent.Sentinel/Register"
	Sentinel_StreamHeartbeats_FullMethodName = "/agent.Sentinel/StreamHeartbeats"
	Sentinel_SendLogs_FullMethodName         = "/agent.Sentinel/SendLogs"
)

// SentinelClient is the client API for Sentinel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SentinelClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	StreamHeartbeats(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Heartbeat, Empty], error)
	SendLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LogLine, Empty], error)
}

type sentinelClient struct {
	cc grpc.ClientConnInterface
}

func NewSentinelClient(cc grpc.ClientConnInterface) SentinelClient {
	return &sentinelClient{cc}
}

func (c *sentinelClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, Sentinel_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sentinelClient) StreamHeartbeats(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Heartbeat, Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Sentinel_ServiceDesc.Streams[0], Sentinel_StreamHeartbeats_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Heartbeat, Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Sentinel_StreamHeartbeatsClient = grpc.ClientStreamingClient[Heartbeat, Empty]

func (c *sentinelClient) SendLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LogLine, Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Sentinel_ServiceDesc.Streams[1], Sentinel_SendLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LogLine, Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Sentinel_SendLogsClient = grpc.ClientStreamingClient[LogLine, Empty]

// SentinelServer is the server API for Sentinel service.
// All implementations must embed UnimplementedSentinelServer
// for forward compatibility.
type SentinelServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	StreamHeartbeats(grpc.ClientStreamingServer[Heartbeat, Empty]) error
	SendLogs(grpc.ClientStreamingServer[LogLine, Empty]) error
	mustEmbedUnimplementedSentinelServer()
}

// UnimplementedSentinelServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSentinelServer struct{}

func (UnimplementedSentinelServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedSentinelServer) StreamHeartbeats(grpc.ClientStreamingServer[Heartbeat, Empty]) error {
	return status.Errorf(codes.Unimplemented, "method StreamHeartbeats not implemented")
}
func (UnimplementedSentinelServer) SendLogs(grpc.ClientStreamingServer[LogLine, Empty]) error {
	return status.Errorf(codes.Unimplemented, "method SendLogs not implemented")
}
func (UnimplementedSentinelServer) mustEmbedUnimplementedSentinelServer() {}
func (UnimplementedSentinelServer) testEmbeddedByValue()                  {}

// UnsafeSentinelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SentinelServer will
// result in compilation errors.
type UnsafeSentinelServer interface {
	mustEmbedUnimplementedSentinelServer()
}

func RegisterSentinelServer(s grpc.ServiceRegistrar, srv SentinelServer) {
	// If the following call pancis, it indicates UnimplementedSentinelServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Sentinel_ServiceDesc, srv)
}

func _Sentinel_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SentinelServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sentinel_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SentinelServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sentinel_StreamHeartbeats_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SentinelServer).StreamHeartbeats(&grpc.GenericServerStream[Heartbeat, Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Sentinel_StreamHeartbeatsServer = grpc.ClientStreamingServer[Heartbeat, Empty]

func _Sentinel_SendLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SentinelServer).SendLogs(&grpc.GenericServerStream[LogLine, Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Sentinel_SendLogsServer = grpc.ClientStreamingServer[LogLine, Empty]

// Sentinel_ServiceDesc is the grpc.ServiceDesc for Sentinel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sentinel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.Sentinel",
	HandlerType: (*SentinelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Sentinel_Register_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamHeartbeats",
			Handler:       _Sentinel_StreamHeartbeats_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendLogs",
			Handler:       _Sentinel_SendLogs_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/agent.proto",
}
